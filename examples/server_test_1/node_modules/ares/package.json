{
  "name": "ares",
  "version": "0.0.1",
  "description": "Node.js WebGL Javascript Game Framework",
  "main": "./src/aresserver.js",
  "bin": {
    "ares": "./bin/ares.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/lonewolfgames/Ares.js.git"
  },
  "keywords": [
    "ares.js",
    "ares",
    "webgl",
    "2d",
    "3d",
    "canvas",
    "game",
    "engine",
    "game engine"
  ],
  "author": {
    "name": "Nathan Faucett"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "b8a2024b472bbfee373b69b6a3659536570bc4b0",
  "dependencies": {
    "requirejs": "~2.1.5",
    "amdefine": "~0.0.4",
    "socket.io": "~0.9.14",
    "commander": "~1.1.1",
    "mkdirp": "~0.3.5",
    "ncp": "~0.4.2"
  },
  "readme": "Ares.js\n=======\n\nNode.js WebGL Javascript App Framework\n\n[Examples](http://lonewolfgames.github.io/Ares.js/) - [Documentation](http://lonewolfgames.github.io/Ares.js/doc/)\n\n\n## How to install with npm\n```\n// install the ares.js package\n// npm package is not updated as much as the github repository\n// right now it is better to download from github\n$ sudo npm install ares -g\n```\n\n\n### App\na App Class is the base for everything in your app, also check documentation for ClientApp and ServerApp\n```\nvar MyApp = new ClientApp({ /*options*/ }); // options effect Settings.js\n\n// to renderer a game we need an active scene and a camera component that is within the scene\nvar camera = new GameObject({\n    components: [\n        new Transform,\n        new Camera\n    ]\n});\nvar scene = new Scene;\n\n//add camera to scene\nscene.addGameObject( camera );\n\n// then set App's scene and camera\n// set scene first, because App.setCamera needs an active scene\nMyApp.setScene( scene );\nMyApp.setCamera( camera );\n```\n\n### Scenes\nScenes hold and manage GameObjects and their Components\n```\nvar scene = new Scene({ /*options*/ });\n\n//Scenes must be added to game, set as the active scene to be able to render that scene\ngame.addScene( scene );\n\n//other options are\ngame.addScenes( scene1, scene2, scene3... );\n\n//same as above\ngame.add( scene1, scene2, scene3... );\n\n//then set game's active scene with App.setScene\ngame.setScene( scene );\n```\n\n\n### GameObjects\nGameObjects are containers that hold Components\n```\nvar player = new GameObject({\n    components: [\n        // every GameObject needs a Transform\n        new Transform({\n            position: new Vec3( 0, 0, 5 ),\n            rotation: new Quat().rotate( 0, 0, Math.PI*0.5 )\n        })\n    ],\n    tags: [\n        \"player\"\n    ]\n});\n\n//add to scene\nscene.addGameObject( player );\n\n//other options are\nscene.addGameObjects( gameObject1, gameObject2, gameObject3... );\n\n//same as above\nscene.add( gameObject1, gameObject2, gameObject3... );\n```\n\n\n## Setting up a App Environment\n\n```\n// create ares environment, pass -s to create a server based environment\n$ ares new MyApp\n$ cd MyApp/\n```\ndirectory structure looks like\n```\nMyApp/\n----assets/\n----build/\n----lib/\n--------require.js\n----src\n--------ares/\n------------\"ares source files\"\n--------index.js\n----build.js\n----index.html\n----package.json\n----README.md\n```\n\nif server based ( -s passed )\n```\n// install npm packages\n$ npm install\n\n// a server.js file will have been created in the src folder, so to start the server\n$ node src/server.js\n\n// console should log this\n    info  - socket.io started\nApp started at 127.0.0.1:3000\n```",
  "bugs": {
    "url": "https://github.com/lonewolfgames/Ares.js/issues"
  },
  "homepage": "https://github.com/lonewolfgames/Ares.js",
  "_id": "ares@0.0.1",
  "dist": {
    "shasum": "73e5c9dcca3503a758a7d909078a15c6059ee59e"
  },
  "_from": "../../"
}
